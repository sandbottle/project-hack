'use strict';
const fs = require('fs');
const path = require('path');
const child_process = require('child_process');

function execFile_python( option  , cb )
{
    var cmdline = '';
    var args = option.args || [];

    if ( option.python )
    {
        cmdline = option.python;
    }
    else
    {
        cmdline = "python";
    }
    
    args.unshift( option.file );

    child_process.execFile(
                    cmdline ,
                    args  ,
                    {
                        cwd : option.cwd ,
                        env : option.env ,
                        encoding : option.encoding || "utf-8" ,
                        timeout : option.timeout || 0 ,
                        maxBuffer : option.maxBuffer || 1024 * 1024 ,
                        shell  : option.shell || false
                    } ,
                    function( err , stdout , stderr)
                    {
                        if ( err )
                        {
                            if ( stderr )
                            {
                                cb( null , stderr );
                            }
                            else
                            {
                                cb( err );
                            }
                        }
                        else
                        {
                            if ( 0 == stdout.length )
                            {
                                if ( stderr )
                                {
                                    cb( null , stderr );
                                }
                                else
                                {
                                     cb( null , stdout );
                                }
                            }
                            else
                            {
                                 cb( null , stdout );
                            }
                           
                        }
                    }
    );
}

function execFile(  )
{
    var argv = Array.prototype.slice.call(arguments);
    var cb = null;
    var arg_option = null;
    var option = {};

    if ( 0 == argv.length )
    {
        throw new Error('invalid param');
    }

    if ( 'function' != typeof argv[ argv.length - 1]  )
    {
        throw new Error('invalid param');
    }
    cb = argv[ argv.length - 1 ];

    if ( !argv[0] )
    {
        return cb( new Error('invalid param') );
    }

    if ( "string" == typeof argv[0] )
    {
        option.file = path.resolve( argv[0] );

        if ( argv.length >= 2  )
        {
            if ( argv[1] )
            {
                if ( Array.isArray( argv[1] ) )
                {
                    arg_option = {};
                    arg_option.args = argv[1];
                }
                else if ( "string" == typeof argv[1] )
                {
                    arg_option = {};
                    arg_option.args = argv[1].split();
                }
                else if ( "object" == typeof argv[1]  )
                {
                    arg_option = argv[1];
                }
                else
                {
                    arg_option = {};
                }
            }
            else
            {
                arg_option = {};
            }
        }
        else
        {
            arg_option = {};
        }
    }
    else if ( "object" == typeof argv[0]  )
    {
        arg_option = argv[0];
    }
    else
    {
        return cb( new Error('invalid param') );
    }
    
    if ( "object" == typeof arg_option  )
    {
        if ( "string" == typeof arg_option.python )
        {
            option.python = path.resolve( arg_option.python );
        }

        if ( "string" == typeof arg_option.file )
        {
            option.file = path.resolve( arg_option.file );
        }

        if ( "string" == typeof arg_option.cwd  )
        {
            option.file = path.resolve( arg_option.cwd );
        }

        if ( "number" == typeof arg_option.timeout  )
        {
            option.timeout = arg_option.timeout;
        }

        if ( "number" == typeof arg_option.encoding  )
        {
            option.encoding = arg_option.encoding;
        }

        if ( "number" == typeof arg_option.maxBuffer )
        {
            option.maxBuffer = arg_option.maxBuffer;
        }

        if ( Array.isArray( arg_option.args ) )
        {
            option.args = arg_option.args;
        }
        else if ( "string" == typeof arg_option.args )
        {
            option.args = arg_option.args.split();
        }
        
    }

    if ( !option.file )
    {
        return cb( new Error('need file'));
    }

    fs.stat(
        option.file ,
        function( _err , _stats)
        {
            if ( _err) 
            {
                return cb( new Error('not found script file') );
            }
            else
            {
                execFile_python( option , cb );
            }
        }
    )

    return 0;
}
exports.execFile = execFile;

function main(  )
{
    var file = "1.py";

    execFile( {"file" : file }  , function(err , data)
    {
        if ( err )
        {
            console.log( err );
        }
        else
        {
            console.log( data );
        }
    });

    return 0;
}

if ( !module.parent )
{
    main( process.argv );
}