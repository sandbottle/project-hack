import { AstBlock, Token } from './common';
export declare type PackageLoader = (packageName: string) => any;
export declare type ModuleLoader = (filePath: string) => Promise<string>;
export declare function jsPython(): Interpreter;
export declare class Interpreter {
    private readonly initialScope;
    private _lastExecutionContext;
    private packageLoader?;
    private moduleLoader?;
    constructor();
    static create(): Interpreter;
    get initialExecutionContext(): Record<string, unknown>;
    get lastExecutionContext(): Record<string, unknown> | null;
    cleanUp(): void;
    jsPythonInfo(): string;
    tokenize(script: string): Token[];
    parse(script: string, moduleName?: string): AstBlock;
    eval(codeOrAst: string | AstBlock, scope?: Record<string, unknown>, entryFunctionName?: string, moduleName?: string): unknown;
    evalAsync(codeOrAst: string | AstBlock, scope?: Record<string, unknown>, entryFunctionName?: string, moduleName?: string): Promise<unknown>;
    /**
     * Compatibility method (with v1). !
     */
    evaluate(script: string, context?: object, entryFunctionName?: string, moduleName?: string): Promise<any>;
    registerPackagesLoader(loader: PackageLoader): Interpreter;
    registerModuleLoader(loader: ModuleLoader): Interpreter;
    addFunction(funcName: string, fn: (...args: any[]) => void | any | Promise<any>): Interpreter;
    assignGlobalContext(obj: object): Interpreter;
    hasFunction(scripts: string | undefined, funcName: string): boolean;
    private assignImportContext;
    private moduleParser;
    private packageResolver;
}
//# sourceMappingURL=interpreter.d.ts.map